package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductDeployementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementAllPropertiesEquals(ProductDeployement expected, ProductDeployement actual) {
        assertProductDeployementAutoGeneratedPropertiesEquals(expected, actual);
        assertProductDeployementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementAllUpdatablePropertiesEquals(ProductDeployement expected, ProductDeployement actual) {
        assertProductDeployementUpdatableFieldsEquals(expected, actual);
        assertProductDeployementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementAutoGeneratedPropertiesEquals(ProductDeployement expected, ProductDeployement actual) {
        assertThat(actual)
            .as("Verify ProductDeployement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementUpdatableFieldsEquals(ProductDeployement expected, ProductDeployement actual) {
        assertThat(actual)
            .as("Verify ProductDeployement relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getRefContract()).as("check refContract").isEqualTo(expected.getRefContract()))
            .satisfies(a ->
                assertThat(a.getStartDeployementDate()).as("check startDeployementDate").isEqualTo(expected.getStartDeployementDate())
            )
            .satisfies(a -> assertThat(a.getEndDeployementDate()).as("check endDeployementDate").isEqualTo(expected.getEndDeployementDate())
            )
            .satisfies(a -> assertThat(a.getCreaDate()).as("check creaDate").isEqualTo(expected.getCreaDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementUpdatableRelationshipsEquals(ProductDeployement expected, ProductDeployement actual) {
        assertThat(actual)
            .as("Verify ProductDeployement relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getDeployementType()).as("check deployementType").isEqualTo(expected.getDeployementType()))
            .satisfies(a -> assertThat(a.getHa()).as("check ha").isEqualTo(expected.getHa()))
            .satisfies(a -> assertThat(a.getHsm()).as("check hsm").isEqualTo(expected.getHsm()))
            .satisfies(a -> assertThat(a.getDb()).as("check db").isEqualTo(expected.getDb()))
            .satisfies(a -> assertThat(a.getHost()).as("check host").isEqualTo(expected.getHost()))
            .satisfies(a -> assertThat(a.getApplicationServer()).as("check applicationServer").isEqualTo(expected.getApplicationServer()))
            .satisfies(a -> assertThat(a.getOs()).as("check os").isEqualTo(expected.getOs()));
    }
}
