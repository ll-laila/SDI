package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ActionRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActionRequestAllPropertiesEquals(ActionRequest expected, ActionRequest actual) {
        assertActionRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertActionRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActionRequestAllUpdatablePropertiesEquals(ActionRequest expected, ActionRequest actual) {
        assertActionRequestUpdatableFieldsEquals(expected, actual);
        assertActionRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActionRequestAutoGeneratedPropertiesEquals(ActionRequest expected, ActionRequest actual) {
        assertThat(actual)
            .as("Verify ActionRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActionRequestUpdatableFieldsEquals(ActionRequest expected, ActionRequest actual) {
        assertThat(actual)
            .as("Verify ActionRequest relevant properties")
            .satisfies(a -> assertThat(a.getEntityType()).as("check entityType").isEqualTo(expected.getEntityType()))
            .satisfies(a -> assertThat(a.getNewData()).as("check newData").isEqualTo(expected.getNewData()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getApprovedBy()).as("check approvedBy").isEqualTo(expected.getApprovedBy()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActionRequestUpdatableRelationshipsEquals(ActionRequest expected, ActionRequest actual) {
        // empty method
    }
}
